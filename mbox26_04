/*
CODE for setting alarm and displaying RTC
Test/demo of read routines for a DS3231 RTC.

Turn on the serial monitor after loading this to check if things are
working as they should.

*/

#include <DS3231.h>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


// If using software SPI (the default case):
#define OLED_MOSI   9
#define OLED_CLK   10
#define OLED_DC    11
#define OLED_CS    12
#define OLED_RESET 13
Adafruit_SSD1306 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);


//Input & Button Logic
const int numOfInputs = 4;
const int inputPins[numOfInputs] = {8,7,6,5};
int inputState[numOfInputs];
int lastInputState[numOfInputs] = {LOW,LOW,LOW,LOW};
bool inputFlags[numOfInputs] = {LOW,LOW,LOW,LOW};
//int inputFlag1,inputFlag2,inputFlag3,inputFlag4 = 0;
long lastDebounceTime[numOfInputs] = {0,0,0,0};
long debounceDelay = 5;
int flag1 = 0;
DS3231 Clock;
bool Century=false;
bool h12;
bool PM;
int A1h,A1m;
int A2h,A2m;
int h1;
int count = 0;
//LCD Menu Logic
const int numOfScreens = 2;
int currentScreen = 0;
String screens[numOfScreens][4] = {{"SETTINGS","Doses","Alarms","Exit"}, {"OPTIONS", "1","2","3"}};
int parameters[numOfScreens];

void setup() {

for(int i = 0; i < numOfInputs; i++) {
    pinMode(inputPins[i], INPUT);
    digitalWrite(inputPins[i], HIGH); // pull-up 20k
  }
  // Start the I2C interface
  Wire.begin();
  // Start the serial interface
  Serial.begin(9600);
  display.begin(SSD1306_SWITCHCAPVCC);
  display.display();
  delay(1000);
  display.clearDisplay();
}

void loop() {
  /*displaying time on oled */
setInputFlags();
resolveInputFlags();

}
void setInputFlags() {

  for(int i = 0; i < numOfInputs; i++) {
    int reading = digitalRead(inputPins[i]);
    Serial.println(reading);
  
    if (reading != lastInputState[i]) {
      lastDebounceTime[i] = millis();
    }
    if ((millis() - lastDebounceTime[i]) > debounceDelay) {
      if (reading != inputState[i]) {
        inputState[i] = reading;
        if (inputState[i] == LOW) {
          inputFlags[i] = HIGH;
          
        }
      }
    }
    lastInputState[i] = reading;
    
  }
}
void resolveInputFlags() {
  for(int i = 0; i < numOfInputs; i++) {
    if(inputFlags[i]) {
      inputAction(i);
      inputFlags[i] = LOW;
     // printScreen();

    }
    else if(inputFlags[i] == 0 && flag1==0)
    {
     display.clearDisplay();  
     timedisplay();
     
    }
  }
}

void inputAction(int input) {
// Serial.print(input);
  if(input == 0) {
      printScreen();
      flag1 =1;
  }
 else if(input == 1) {
 // cursorChange();
 // Serial.print(count);
  }
  else if(input == 3 ) {
     display.clearDisplay(); 
     timedisplay();
  }
}

void timedisplay()
{
  display.setTextSize(1);
  display.setTextColor(WHITE); 
  display.setCursor(0,25);
  display.println("Menu");
  display.setCursor(110,25);
  display.println("Ok");
  int h = Clock.getHour(h12, PM);
  //Serial.print(h12); 
  int m = Clock.getMinute();
  int s = Clock.getSecond();
  if (h==12)
  {
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0,1);
    display.print(h);
    display.print(":");
    display.print(m);
    display.print(":");
    display.print(s);
    display.print("PM");
    display.display();
    display.clearDisplay();    
   }
   else if (h>12) 
   {
     h1 = h-12;
     display.setTextSize(2);
     display.setTextColor(WHITE);
     display.setCursor(0,1);
     display.print(h1);
     display.print(":");
     display.print(m);
     display.print(":");
     display.print(s);
   // display.print(" ");
     display.print("PM");
     display.display();
     display.clearDisplay();
    }
    else
    {
      display.setTextSize(2);
      display.setTextColor(WHITE);
      display.setCursor(0,1);
      display.print(h);
      display.print(":");
      display.print(m);
      display.print(":");
      display.print(s);
      display.print("AM");
      display.display();
      display.clearDisplay();   
    }   
}
void settings()
{
   display.clearDisplay();
   display.setTextSize(1);
   display.setTextColor(WHITE);
   display.setCursor(40,0);
   display.print("SETTINGS");
   display.setCursor(6,6);
   display.print("Doses");
   display.setCursor(6,14);
   display.print("Alarms");
   display.setCursor(6,22);
   display.print("Exit");
   display.display();
}
void doses()
{
   display.clearDisplay();
   display.setTextSize(1);
   display.setTextColor(WHITE);
   display.setCursor(40,0);
   display.print("DOSES");
   display.setCursor(6,6);
   display.print("1");
   display.setCursor(6,14);
   display.print("2");
   display.setCursor(6,22);
   display.print("3");
   display.display();
 
}
void printScreen() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE); 
  display.setCursor(40,0);
  display.println(screens[currentScreen][0]);
  display.setCursor(6,6);
  display.print(screens[currentScreen][1]);
  display.setCursor(6,14);
  display.print(screens[currentScreen][2]);
  display.setCursor(6,24);
  display.print(screens[currentScreen][3]);
  display.display();
}
void cursorChange()
{
  int cursorValue = 6;
  cursorValue = cursorValue+8;
// Serial.print(cursorValue);
  display.setTextSize(1);
   display.setTextColor(WHITE);
   display.setCursor(6,cursorValue);
            display.print(">");
            display.display();  
  
}
